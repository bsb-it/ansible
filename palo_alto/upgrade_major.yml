---
# upgrade_single.yml - PAN-OS single firewall upgrade playbook.
#
# Description
# ===========
#
# Upgrades a single PAN-OS device to the specified version.  Upgrade must be a single step (i.e. 8.1.7 to 8.1.12).
# For major version upgrades requiring a base image to be downloaded to the device prior to performing the upgrade,
# see the 'download_panos_image.yml' playbook.
#
# This playbook requires connection details for the deivce to be specified in the variables 'ip_address', 'username',
# and 'password'.  These may be defined as host variables (see `host_vars/firewall.yml` for an example) or 
# extra vars.
#
# Modules Used
# ============
#
# panos_op - https://paloaltonetworks.github.io/pan-os-ansible/modules/panos_op.html
#
# Usage
# =====
#
# Required variables:
#
#   target: Target PAN-OS device, as named in the inventory.  See `host_vars/firewall.yml` for sample 
#           definition of host variables.
#
#   version: Version to install.
#
# See the VARS section of the playbook for additional customization options.
#
# Default run (maintenance release upgrade):
#
#  $ ansible-playbook -i inventory upgrade_single.yml --extra-vars "target=firewall version=9.0.3-h3"

- hosts: all
  connection: local
  
  collections:
    - paloaltonetworks.panos

  vars:
    device:
      ip_address: '{{ ip_address }}'
      username: '{{ lookup("env", "ANSIBLE_NET_USERNAME") | default(omit) }}'
      password: '{{ lookup("env", "ANSIBLE_NET_PASSWORD") | default(omit) }}'
      api_key: '{{ api_key | default(omit) }}'

    # backup_config - Create a backup of the currently running config.
    backup_config: true

    # backup_filename - Filename for running config backup.
    backup_filename: 'ansible-backup-{{ ansible_date_time.date }}.xml'
  
    sync_to_peer: False

  tasks:
    - name: install Python package
      ansible.builtin.shell: pip install pan-os-python

    - name: Check latest content
      panos_op:
        provider: '{{ device }}'
        cmd: 'request content upgrade check'
      register: check
      changed_when: False

    - name: Download latest content
      paloaltonetworks.panos.panos_op:
        provider: '{{ device }}'
        cmd: |
          <request><content><upgrade><download>
          <latest></latest>
          {% if sync_to_peer %}<sync-to-peer>yes</sync-to-peer>{% endif %}
          </download></upgrade></content></request>
        cmd_is_xml: True
      register: download

    - name: Check content download result
      paloaltonetworks.panos.panos_op:
        provider: '{{ device }}'
        cmd: 'show jobs id {{ (download.stdout | from_json).response.result.job }}'
      register: download_job
      until: download_job is not failed and (download_job.stdout | from_json).response.result.job.status == 'FIN'
      retries: 10
      delay: 60

    - name: Install latest content
      paloaltonetworks.panos.panos_op:
        provider: '{{ device }}'
        cmd: |
          <request><content><upgrade><install>
          <version>latest</version>
          {% if sync_to_peer %}<sync-to-peer>yes</sync-to-peer>{% endif %}
          </install></upgrade></content></request>
        cmd_is_xml: True
      register: install

    - name: Check content install result
      paloaltonetworks.panos.panos_op:
        provider: '{{ device }}'
        cmd: 'show jobs id {{ (install.stdout | from_json).response.result.job }}'
      register: install_job
      until: install_job is not failed and (install_job.stdout | from_json).response.result.job.status == 'FIN'
      retries: 10
      delay: 60  

    - name: Backup device config
      paloaltonetworks.panos.panos_op:
        provider: '{{ device }}'
        cmd: 'save config to {{ backup_filename }}'
      when: backup_config|bool  
  
    - name: Install target PAN-OS version
      paloaltonetworks.panos.panos_software:
        provider: '{{ device }}'
        version: '{{ target_version }}'
        timeout: 1800
        restart: true

    - name: Pause for restart
      pause:
        seconds: 30

    - name: Check to see if device is ready
      paloaltonetworks.panos.panos_op:
        provider: '{{ device }}'
        cmd: 'show chassis-ready'
      changed_when: false
      register: result
      until: result is not failed and (result.stdout | from_json).response.result == 'yes'
      retries: 30
      delay: 60
