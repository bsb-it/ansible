---
# Playbook for Exchange Server Update
# Deaktivieren des Nodes
# WICHTIG: EXCHANGE_TARGET (also anderer DAG-Node) muss definiert sein

- name: Windows Updates Exchange Server
  hosts:
    - all
  serial:
    - 1
  # strategy: free
  gather_facts: yes

  tasks:
    - name: PowerShell script Pre-Installation Exchange
      ansible.windows.win_powershell:
        script: |
          # Exchange Module laden
          Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn
          # Prüfen ob bereits im Wartungsmodus (ClusterNode not UP und keine Datenbank aktiv gemountet)
          # if ((Get-ClusterNode -Name $env:Computername).state -ne "Up" -and (Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {
          if ((Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {
              echo "Server $env:ComputerName befindet sich bereits im WARTUNGSMODUS"
              echo "Keine Änderung vorgenommen..."
              Exit
          }
          # Sicherheitsfunktionen abschalten (PS-Execution-Policy und Defender)
          # echo "Server $env:ComputerName wird in den Wartungsmodus versetzt..."
          # echo "PS-Policy und Defender werden deaktiviert"
          # Set-ExecutionPolicy Unrestricted -force
          # Set-MpPreference -DisableRealtimeMonitoring $true
          # Sleep -Seconds 3
          # echo "PS-Policy unrestriced und Defender deaktiviert"
          # Hub-Transport abschalten
          # Es werden keine Mails mehr angenommen
          # echo "Hub-Transport wird deaktiviert und Mail-Queues verschoben..."
          # Set-ServerComponentState -Identity $env:ComputerName –Component HubTransport –State Draining –Requester Maintenance
          # Sleep -Seconds 5
          # Bestehende Mails werden aus der Queue auf einen anderen Server verschoben
          # Redirect-Message -Server $env:ComputerName -Target '{{ EXCHANGE_TARGET }}' -Confirm:$false
          # echo "Hub-Transport deaktiviert"
          # ClusterNode in Suspend-Mode
          # echo "ClusterNode $env:ComputerName wird angehalten"
          # Suspend-ClusterNode –Name $env:ComputerName
          # Sleep -Seconds 3
          # echo "ClusterNode $env:ComputerName angehalten"
          # Mailbox-Datenbanken verschieben und 
          # echo "Aktive Mailboxdatenbanken werden evakuiert"
          # Set-MailboxServer $env:ComputerName –DatabaseCopyActivationDisabledAndMoveNow $true
          # Set-MailboxServer $env:ComputerName –DatabaseCopyAutoActivationPolicy Blocked
          # echo "Skript wartet, bis Datenbanken evakuiert wurden - Prüfintervall: 30 Sekunden"
          # While ((Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -ne 0) 
          # {
          #   Sleep -Seconds 30
          # }
          # echo "Datenbanken wurden alle evakuiert - keine aktive Datenbankkopie mehr auf $env:ComputerName aktiv"
          # Server-Komponenten deaktivieren
          # Set-ServerComponentState -Identity $env:ComputerName –Component ServerWideOffline –State InActive –Requester Maintenance
          # echo "Alle Server-Komponenten deaktiviert"
          # Prüfen ob im Wartungsmodus (keine aktiven Datenbanken und ClusterNode not UP)
          # if ((Get-ClusterNode -Name $env:Computername).state -ne "Up" -and (Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {
          if ((Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {  
              echo "Server $env:ComputerName befindet sich im WARTUNGSMODUS"
          }
          else {
              echo "Server $env:ComputerName befindet sich NICHT im WARTUNGSMODUS"
              echo "Bitte prüfen Sie die Dienste und Befehle auf Meldungen"
              Exit
          }
      register: exchange_down_result

    - name: print variable
      debug:
        msg:
        - '{{ exchange_down_result }}'
       
